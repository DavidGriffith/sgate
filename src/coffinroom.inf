Inside CoffinRoom "Coffin Room"
	with name "room" "hall" "hallway",
	description [;
		print "This long, cold hallway is lined on either side
		by five coffins propped against the walls.  Exits lie to
		the west and east.";
		if (CoffinSlime in self)
			"  A puddle of green slime blocks the east exit.";
		"";
	],
	before [;
	Smell:
		if (noun == nothing)
			"You detect a faint acidic odor.";
	],
	w_to FourWay,
	e_to [;
		if (CoffinSlime in self) {
			CoffinSlime.death();
			rtrue;
		}
		return MirrorRoom;
	],
	cant_go "You can only go east or west.";


Object -> Coffins "coffins"
	with name "coffins",
	description [;
		"You can see a marble coffin, a silver coffin, a stone
		coffin, a gold coffin, and a coffin made of dragon
		scales.";
	],
	before [;
	Open:
		"You can only manage to open one coffin at a time.";
	Close:
		"You can only manage to close one coffin at a time.";
	],
	has scenery pluralname;


! Banshee
!
Object -> MarbleCoffin "marble coffin"
	with name "coffin" "marble",
	description [;
		if (self hasnt open) {
			"The cold, marble coffin lid seals an ancient
			death bed.";
		}
		"This is a bug.  The marble coffin should never remain
		open.";
	],
	before [;
	Open:
		"As you open the coffin a banshee flies out, emits
		an ear-shattering scream, and pulls the coffin closed
		again.^
		^
		You're all right, but it is very hard to hear.";
	],
	has scenery container openable;


! Slime
!
Object -> SilverCoffin "silver coffin"
	with name "coffin" "silver",
	description [;
		if (self hasnt open) {
			"This tomb is sealed with a silver lid.";
		}
		"A disgusting green slime has flowed out of this
		open coffin and puddled across the eastern end of this
		hallway.";
	],
	before [;
	Close:
		if (self has open)
			"You can't close the coffin with all that slime
			in the way.";
	Open:
		if (self hasnt open) {
			give self open;
			move CoffinSlime to parent(self);
			"A disgusting green slime flows out of the
			silver coffin and puddles all over the eastern
			end of this hallway.";
		}
	],
	has scenery container openable;


! Empty
!
Object -> StoneCoffin "stone coffin"
	with name "coffin" "stone",
	description [;
		if (self hasnt open) 
			"It's a cold stone coffin.";
		<<search self>>;
	],
	has scenery container openable;


! Contains leather pouch which contains three copper coins.
! Pouch is omitted.
!
Object -> GoldCoffin "gold coffin"
	with name "coffin" "gold" "golden",
	description [;
		if (self hasnt open) {
			"The lid of this coffin is made of solid gold.
			It must be worth a fortune.";
		}
		<<search self>>;
	],
	has scenery container openable;

CopperCoin -> ->;
CopperCoin -> ->;
CopperCoin -> ->;


! Mummy with sceptre
!
Object -> DragonscaleCoffin "dragon scale coffin"
	with name "coffin" "dragon" "scale" "scales" "dragonscale"
		"dragonscales",
	description [;
		if (self hasnt open) {
			"This standing sarcophagus is sealed with a
			dragon scale cover.";
		}
		if (CoffinMummy in self) {
			"A mummy stands silently before you in the
			upright coffin.";
		}
		if (sceptre in self) {
			"A jewel-studded sceptre leans against the
			bottom of the coffin.";
		}
		<search self>;
	],
	has scenery container openable;


Object -> -> CoffinMummy "mummy"
	with name "mummy",
	description "This carefully-embalmed six-footer stands straight
			and still.",
	before [;
	Burn:
		if (second ~= nothing && second hasnt on)
			"You can't burn ", (the) self, " with ", (the)
			second, ".";

		move sceptre to parent(self);
		remove self;
		"The mummy bursts into flames, leaving behind a sceptre
		among the ashes.";

	ThrownAt:
		if (noun ofclass Torch && noun has light) {
			<burn self noun>;
		} else {
			print (The) self, " remains motionless and
			unharmed.^";
		}
		move noun to CoffinRoom;
		print_ret "^", (The) noun, " clatters to the floor.";		

	Attack:
		if (verb_word == 'kill')
			"The mummy is already dead, nor does it
			seem to be undead.  It just lies there.";

		if (second == Sword)
			<<cut self>>;

		if (second ofclass Torch && second has light)
			<<burn self>>;

		if (second) {
			print "Hitting the mummy with ", (the) second;
		} else {
			print "Simply ";
			switch (verb_word) {
			'punch':
				print "punching";
			'kick':
				print "kicking";
			'hit':
				print "hitting";
			default:
				print "attacking";
			}
			print " the mummy like that";
		}
		" won't do any good.";
	Search, Open:
		"There seems to be something long, thin, and metallic
		buried in the wrappings near the mummy's back, but you
		can't really get at it.";
	Cut:
		"The resin-soaked wrappings are tougher than they look.";
	],
	has animate;


Object -> -> -> sceptre "sceptre"
	with name "jeweled" "sceptre" "scepter",
	description "This jewel-studded sceptre is truly made for a king.";

	
Object CoffinSlime "puddle of green slime"
	with name "green" "slime" "puddle",
	description "This green slime is very thick and is radiantly
		warm.",
	before [;
	Smell:
		"It smells of rotting flesh and acid.";
	Take, Touch, Transfer, Taste:
		"The slime would very likely dissolve anything that
			touches it.";
	Listen:
		"It makes a faint bubbling sound.";
	],
	death [;
		deadflag = 1;
		"You try to pass the slime but it engulfs your body,
		dissolving it in seconds.^
		^
		You die instantly. No pain. No nothing.
		You were slimed.";
	],
	has scenery;

